name: Build and Test CMake/Ninja on Multiple Platforms

on:
  workflow_dispatch:
  pull_request:

jobs:
  build-and-test-on-all-OS:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      # - name: Install Dependencies (if needed)
      #   run: |
      #     if [[ "$RUNNER_OS" == "Linux" ]]; then
      #       sudo apt-get update
      #       sudo apt-get install -y clang-20 llvm-20 clang-tools-20 libclang-common-20-dev libclang-20-dev libclang1-20 llvm-20-dev
      #     elif [[ "$RUNNER_OS" == "macOS" ]]; then
      #       brew upgrade
      #       brew install llvm
      #     elif [[ "$RUNNER_OS" == "Windows" ]]; then
      #       choco install llvm
      #     fi
      - name: Get Dependencies Ubuntu
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-16 llvm-16 clang-tools-16 libclang-common-16-dev libclang-16-dev libclang1-16 llvm-16-dev
      - name: Get Dependencies Mac
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          brew upgrade
          brew install llvm
      - name: Get Dependencies Windows
        if: ${{ matrix.os == 'windows-latest' }}
        run: >
          choco install llvm
      - name: Find Clang Prefix Path
        id: find-clang
        shell: bash
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            echo "Running on Windows..."
            # Execute PowerShell and capture output with error stream
            output=$(powershell -NoProfile -Command "
              \$ClangCommand = Get-Command clang
              if (\$ClangCommand) {
                Write-Output \\"Found Clang: (\$ClangCommand.Path)\\"
                \$ClangPath = Split-Path -Parent \$ClangCommand.Path
                Write-Output \\"clang_path=\$ClangPath\\"
              } else {
                Write-Warning \\"Clang command not found on Windows.\\"
                Write-Output \\"clang_path=\\"
              }
            " 2>&1)
            echo "$output"
            # Extract the clang_path line if it exists
            if grep -q "^clang_path=" <<< "$output"; then
              CLANG_PATH=$(grep "^clang_path=" <<< "$output" | cut -d'=' -f2)
              echo "Extracted CLANG_PATH: $CLANG_PATH"
              echo "clang_path=$CLANG_PATH" >> "$GITHUB_OUTPUT"
            else
              echo "Warning: Could not extract clang_path from PowerShell output."
            fi
          else
            CLANG_PATH=$(dirname $(which clang) || true)
            echo "clang_path=$CLANG_PATH" >> "$GITHUB_OUTPUT"
            if [[ -z "$CLANG_PATH" ]]; then
              echo "Warning: Clang command not found on Linux or MacOS."
            fi
          fi
      - name: Configure CMake
        run: |
          cmake -B build -S . -G Ninja -DCMAKE_PREFIX_PATH=${{ steps.find-clang.outputs.CLANG_PATH }}
      - name: Build
        run: |
          ninja -C build
      - name: Run Full
        run: |
          ./build/full "$(clang -print-resource-dir)" samples/Tester/ properties.config

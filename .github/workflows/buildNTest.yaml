name: Build and Test CMake/Ninja on Multiple Platforms

on:
  workflow_dispatch:
  pull_request:

jobs:
  build-and-test-on-all-OS:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      # - name: Install Dependencies (if needed)
      #   run: |
      #     if [[ "$RUNNER_OS" == "Linux" ]]; then
      #       sudo apt-get update
      #       sudo apt-get install -y clang-20 llvm-20 clang-tools-20 libclang-common-20-dev libclang-20-dev libclang1-20 llvm-20-dev
      #     elif [[ "$RUNNER_OS" == "macOS" ]]; then
      #       brew upgrade
      #       brew install llvm
      #     elif [[ "$RUNNER_OS" == "Windows" ]]; then
      #       choco install llvm
      #     fi
      - name: Get Dependencies Ubuntu
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-20 llvm-20 clang-tools-20 libclang-common-20-dev libclang-20-dev libclang1-20 llvm-20-dev
      - name: Get Dependencies Mac
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          brew upgrade
          brew install llvm
      - name: Get Dependencies Windows
        if: ${{ matrix.os == 'windows-latest' }}
        run: >
          choco install llvm
      - name: Find Clang Prefix Path
        id: find-clang
        shell: bash
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            echo "CLANG_PATH=$(Get-Command clang | Select-Object -ExpandProperty Source | Split-Path -Parent)" >> "$GITHUB_OUTPUT"
          else
            echo "CLANG_PATH=$(dirname $(which clang) || true)" >> "$GITHUB_OUTPUT"
          fi
      # - name: Set reusable strings
      #   id: strings
      #   shell: bash
      #   run: |
      #     echo "windowsClangDIR=${{ which clang }}" >> "$GITHUB_OUTPUT"
      - name: Configure CMake
        run: |
          cmake -B build -S . -G Ninja -DCMAKE_PREFIX_PATH=${{ steps.find-clang.outputs.CLANG_PATH }}
      - name: Build
        run: |
          ninja -C build
      - name: Run Full
        run: |
          ./build/full "$(clang -print-resource-dir)" samples/Tester/ properties.config

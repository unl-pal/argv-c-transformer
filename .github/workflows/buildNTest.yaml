name: Build and Test CMake/Ninja on Multiple Platforms

on:
  workflow_dispatch:
  pull_request:

jobs:
  build-and-test-on-all-OS:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Get Dependencies Ubuntu
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-16 llvm-16 clang-tools-16 libclang-common-16-dev libclang-16-dev libclang1-16 llvm-16-dev
      - name: Get Dependencies Mac
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          brew upgrade
          brew install llvm
      - name: Get Dependencies Windows
        if: ${{ matrix.os == 'windows-latest' }}
        run: >
          choco install llvm
      - name: Find Clang Prefix Path Windows
        id: find-clang-windows
        if: ${{ matrix.os == 'windows-latest' }}
        shell: powershell
        run: |
          $ClangCommand = Get-Command clang
          if ($ClangCommand) {
            $ClangPath = Split-Path -Parent $ClangCommand.Path
            Write-Host "Clang Path: $ClangPath"
            Write-Output "clang_path=$ClangPath"
          } else {
            Write-Warning "CLang Command Not Found"
            Write-Output "clang_path="
          }
      - name: Find Clang Prefix Path Unix
        id: find-clang-unix
        if: ${{ matrix.os == 'macos-latest' || matrix.os == 'ubuntu-latest' }}
        shell: bash
        run: |
          CLANG_PATH=$(dirname $(which clang) || true)
          echo "clang_path=$CLANG_PATH" >> "$GITHUB_OUTPUT"
          if [[ -z "$CLANG_PATH" ]]; then
            echo "Warning: Clang command not found on Linux or MacOS."
          fi
      - name: Configure CMake
        shell: bash
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            MY_CLANG_PATH=${{ steps.find-clang-windows.outputs.CLANG_PATH }}
          else
            MY_CLANG_PATH=${{ steps.find-clang-unix.outputs.CLANG_PATH }}
          fi
          cmake -B build -S . -G Ninja -DCMAKE_PREFIX_PATH=$"MY_CLANG_PATH"
      - name: Build
        run: |
          ninja -C build
      - name: Run Full
        run: |
          ./build/full "$(clang -print-resource-dir)" samples/Tester/ properties.config
